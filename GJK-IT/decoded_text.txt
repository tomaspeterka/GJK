Dobre rano, doporucuju napsat si na dekodovani po radcich program,cHJvdG96ZSBqaW5hayBidWRldGUgbXVzZXQgcG9yYWQgZG9rb2xhYjNCaGEyOTJZWFFnYzNSaGJHVWdkSFVnYzNSbGFtNXZkU0JqYVc1dWIzTjBMZz09VVZOQ2NtSXlhSFpKUjBvMVNVZEthR1J0YkhOaWVVSTJXVmhOWjFsVFFqWmliVGt5WkZFOVBRPT0=V1ZSSk5XUXlSbGxUYmxwcllsVlpkMU5WWkVaYU1sSjBaRWhPV2xZeFNtOWFSVTVEWkZad1dHTkhhR2hOTW5SdVdrVmtWMDVIVWtWUFJEQTk=Vm10amQwNUhUWGRpUld4V1lsZG9iMXBXVmt0bFJtUnpZVVU1VGxJd2NFbFpWRXByWVRGS05tRkhOVnBOUjAweFdsWmFjMWRHVmxoYVIwWlRUVlp3TmxZeFdtOVZNa3BHWWtWc1ZHRnJXbUZVVjNCWFl6RlNSbEpVYkZGVlZEQTU=VmpGb2QxUXhXWGxWV0dScFVsZG9jbFZxVG05VE1WWnhWR3hPYkdKSFVsaFpWV1JIWVZaSmQwMVVWbFZpUjJoRVZqSnplR1JIVWtoT1ZtaFhZWHBXUlZkclVrdFVNbEpHVDFab1QxWXpRbkJXYkZwMlpERmtjbGR0ZEd0TlJFWklXVEJhVTFReFNrVlJWR3M5Vm0wd2QyVkhUWGhTV0doWFlrZG9XRmxyWkRSV01XeHpWVzVPYWxKc1NsbFpNRnBoWWtaS2NrNVdaRnBXVmxVeFZrZDRTMlJIVmtkaVJtUlRaV3hhUlZaVVNqUlRNRFZ6VjI1U1VGWnVRazlWYWtwdlZGWmtWVkZ0ZEZOaVZscFpWbTEwYjJGR1NYZFhiRTVWVmxaYU1scFhlR3RYUjA1R1QxWmtUbEpHV1hkV1Z6RTBZekZhYzFkWWJGWmlhMXBXVm10V1MxUkdjRmhsU0U1WFRXdGFTRlpITVhkVWJVVjRZMFp3VjFJemFISlVhMlJIWkVaYWMyRkhSbFJTTVVwV1ZtMTRhMVV4U1hoYVNFWlRZbXMxY2xWdGRIZE5WbXQzV2tWa1YwMVZjREJhUlZKUFZqRktXRlJxVWxaTmJrNDBXVEp6TVZadFJrZFhiV3hZVWpKb2IxWnJXbXRrTWsxNVZHNU9ZVk5GTlZaWmJGSlhZMVpXYzJGSE9XdFdiRnBJVmxab2ExVldWbFZOUkdzOQ==Vm0wd2QyVkZNVWhTV0doWVYwZDRWRll3WkZOalJsWnpXa1JTV0ZKdGVGbGFWV2hyVmtVeFYxWnFUbGROYmxGM1ZrY3hTMUpyTlZkYVJuQlhWbTVDZVZkWGRHRlpWMUpJVld0V1YySklRbTlVVmxaM1VsWlplRmR0UmxkaVZrWTBWa2Q0YzJGV1NuVlJiazVhVmtVMVJGUnRlR3RXTVd0NllVWk9UbFpVVmtoV1IzaGhZekZXZEZKWWNGSmlSa3BXVm14YVMxWkdVbFZTYkhCc1ZqRmFTVlF4V21GVWJVVjZVV3RvV0ZZelVsaFpha3BIWXpGT1dXSkhhRk5sYlhoWFZtMXdUMUV5VW5OaVNGSnNVMGRTVlZWc1VsZFhiRnBJVFZSU2FGWnNjSGxaTUZZd1ZqSktWVkZZYUZwV1JWcFFXWHBHVTJOc1pITlZiV2hwVW01Q2IxWXhXbXROUjFGNVZHNU9hbEp0VWxsWmJYTXhWMVpXYzFWclpGZGlSbG93V1hwT2IxWnRSalpTYTJSYVZrVTFlbFpxUVhoa1YwWkhVV3hhVjFKWVFsRldha0poVkRKT1YxcElUbEppUlRWVVZXeFdWazFSUFQwPQ==Vm0wd2QyVkZOVWRYV0d4VFltdHdVRlp0TVc5V2JHeDBaVVYwVjAxWGVIbFhhMk0xVmpBeFYyTklhRlpOYm1oUVdWY3hTMUl4WkhGU2JIQk9VakF3ZUZkV1dtdFRNVTVYVW01S1lWSnRhRzlVVmxwM1pWWmtWMWt6YUZOaVZscFpWbTEwWVdGV1NuUlZiR2hoVmpOU1YxcEVSbXRXTVdSMFVteFNhVlpyV1RCV01uUmhZekZzVjFOdVVtaFRSVXBYV1d0YVMxZEdWbk5YYlhScVlraENSbFpYTVRCVWJGcFpVV3RzVjFaNlFYaFZha1pyVTBaT2NtSkdTbWxTTW1oWFZtMTRZVk14WkVkalJXaHNVak5TY1ZsclduZE5SbkJHVmxSR1ZrMVdjRWRXTW5odlYwZEtSMWRzYUZkV1JWcFlXa1ZhUzJSV1RuTlZiV3hYVm01Q1dsWXhXbXRsYXpGWFZtdGthVk5HU25OVk1HUlRWbFpXYzFWclpGZE5WMUo1VjJ0U1ExWnJNVmRpUkZwYVZsWmFNMVpxUVhoa1ZsWjFWMnh3YkdFeGNIbFhXSEJIWkRGS2MyTkZaRlppUjJoVVZGY3hiMkl4V1hoWGJFNVVUV3RzTkZkclZtdGhSVEI1WVVkb1ZtSllUWGhXTUZwWFpFZFNTVnBHWkdsU2EzQllWbXhhYjJFeFZsZFdiRlpPVWtkek9RPT0=Vm0wd2QyVkZOVWRpUm1ScFVtMVNWMVl3Wkc5V1JsbDNXa1JTVjAxV2JETlhhMUpUVmpGYWMySkVUbGhoTVVwVVdWY3hTMUl4WkhWaVJtUnBWa1ZhU1ZkV1ZtRlRNazE0V2toT1dHSkdjRmhVVkVaSFRURmFjbHBFVWxwV01VcElWbTAxVjJGc1NuUlZiRkpWVmtWS1RGWldXbHBsUm1SelYyMTRVMDFFUlRCV2EyTXhVekpHVjFOdVRtcFRSVXBZV1ZSR2QyRkdXa2RYYlVaWFZtczFlRlpYZUZOVWJFcEhWMnBhVjFaRmEzaFdWRVpYVWpGa1dWcEdhR2xTYTNCWlYxWmtNRmxXVWtkWFdHUllZa2hDYzFacVFURlNNWEJHVjJ4a1ZXSkdjRlpXYlhSdlZqRktSbGR0YUZwbGEzQklXWHBHVDFkWFNraGxSazVwVWxoQ1dGWnRNSGhPUjFGM1RVaG9hbEp0VWxsWmJHaFRWMVpXYzFWclpGUmlSM2hYVjJ0b2EyRkdXbkppZWtwYVYwaENTRlpxU2tabFIwNUpWMnh3YkdFeGNGaFhiRnBoVkRKU1YxVnVUbWhTTW5oWVZtMDFRMWRHV25STlJFWnJUVlZ3TUZaV2FHOWhWazVIVTI1T1ZrMUhVbFJXYTFwelkyeHdSVlJyTldsU2JrSmFWa1phVjJFeFdsaFRiRnBYWVd4d1YxWnRNVzlqYkZweFVtMUdUMkpGV2xwWlZWcDNWakZLV1ZGcmJGaGhNVnBvVmtSS1RtVkdjRWxVYldoVFlsZG9WVlpHVWt0aU1rbDRWMjVTVGxOSFVuTlZha0p6VGtaYWMyRkhPV2hTVkVJMlZWY3hSMWxXV2paU1ZFSlhWak5vYUZacVJsZFhWbkJIVVd4YVYxSkZSVEU9Vm0wd2QyVkhVWGhUV0doWFYwZG9WRll3WkRSV1ZsbDNXa2M1VjJKR2JETlhhMUpUVmpBeFdHVkVRbUZXVmxsM1ZtcEJlRmRIVmtkWGJGcE9ZV3RGZUZadE1UUlpWMDE1Vkd0c2FWSnRVazlaVjNoaFpWWmtWMVp0UmxSTmF6RTFWa2QwYTFkSFNrZGpSbWhWVmtWYVNGUlVSbUZqYkhCSlkwZDRVMkpXU2twV2JURXdZekpHUjFOdVVsWmlSa3BXVm10V1IwMHhjRlpYYlhSWFRWaENTbGt3WkRSVk1rcFhVMnhzVjFaNlFYaFdSRXBIVmpGT2RWVnNXbWxTTW1odlZtMXdUMkl5UmtkWFdHaFlZbGhTV0ZSV1duZE5SbFowWlVkMGFGWnNjSGxXTVZKRFZqSkZlVlJZYUZaaGExcGhXbFphVDJOdFJraGhSazVwVmpKb2IxWXhaREJaVjFGNFZXdGtXR0pyTlZsWmJHaFRWMVpXY1ZKcmRGUldia0pIVmpKek5WWlhTa1pqUldoWFRXNW9lbFpxUm1GT2JFWlpZVVphYUdFeGNGbFhhMVpoVkRKTmVGcElUbWhTTW5oVVZGUktiMWRXV1hoYVJGSnBUVlpXTTFSV2FFOWhiRXAwVld4c1dtRXhjRE5aZWtaWFpFZFdTVnBGTlZOaVJWa3dWakowVTFFeFdsaFRiRnBxVWxkU1dGUldXa3RUUmxweFUydGFiRlpzU2xwWlZWcHJWakZLVjJOR2FGaGlSbkJvVlhwS1UxWXhVblZWYlhCVFlrVndWVlp0ZEdGWlZtUnpWMjVTVGxaRlNsaFVWbFY0VGtaYVIyRkhPV2hpUlhCNldUQmFjMWR0U2xWU2JGSlhUVlp3V0ZreFdrZGtWbkJIVkdzMVYySnJTa3RXTVZKUFpERkplRmR1U2s1WFJYQnhWVzAxUTFsV1duTlhibVJPVFZac00xWXlNVEJXUmxweVYyNXNZVlpXY0ROV2FrWkxWMVpHY21KR2FGZFNXRUV5VjJ4V1lXRXhXWGhVYmxaVllsVmFWRlJYTlc5WFZscFlZMFU1YVUxWGVGaFdNV2h2VjBkS1JrNVdWbFZXYkhCTVZGVmFZV1JIVWtoa1IyaHBVbGhDV2xkV1ZtOVRNVnB5VFZWa1YxZEhhRmhaYTFwM1lVWndSbHBGT1U5aVJYQXdXbFZhVDJGV1NuUlBWRTVYVFc1b1dGbHFTa1psUm1SellVWlNhVkp1UWxwWFZ6QXhVVEZrUjFWc2FHcFNiVkpQVkZaYWQwMUdiRFpVYlRsWFRVUkdXVlpYY0VkV2JVcFpZVVpvVjJGcmNFeFdha1pQWTJzeFYxcEdaRk5XV0VKMlZtMTRVMU14VVhsVmEyUlZZbXR3YUZWdGVIZGpSbHB4VkcwNVdHSkdjRmxaTUZZd1lWVXhjbUpFVWxkTmFsWk1WakJrUzFKck5WZFZiRlpYWWtaWk1GWkhlR0ZaVmtsNVVtdG9VRll5YUhCVmJHaERWMVprVlZGdGRHbE5WbkF3VlRKNGMyRkdTa1pPVjBaVlZucFdkbGxWV21GalZrcHpXa1pvVjJKclNrbFdWbVEwV1ZaWmVGTnJXbE5XUlZVNQ==Vm0wd2QyUXlVWGxXYTFwUFZsZFNXRll3Wkc5V2JHeDBaVVYwV0ZKdGVGWlZNbmhQVjBaYWRHVkVRbHBOTTBKSVdWZDRTMk14VG5OWGJGcE9ZbXRLVlZacVFtRlRNbEpJVm10V1VtSlZXbGhXYlhoelRURmFkR05GWkZSTmJFcEpWbTEwVjFWdFNsWlhiRkpYWVd0d2RscFdXbXRXTVhCRlZXeFNUbUY2UlRCV2EyTXhWREpHVjFOWVpGaGlSMmhZV1d4b2IyVnNVbFZTYlVacVlrZDBObGxWV2xOVWJGcFZWbXhzVjFaNlFYaFZla3BIVmpGT2RWUnNhR2xTTW1ob1YxWlNSMlF3TUhoalJtUllZbGhTV0ZSV1dtRmxWbVJ5VjIwNWFGWnNjSHBaTUZaelZqQXhkVlZ1V2xkU1JWcGhXbFphVDJOc2NFaGpSazVwVmpKb2RsWnRNWGRVTWtsNVVtdGthVk5GV2xSWmJHaFRWMFpTVjJGRlRsTmlSbkJaV2xWYVQyRkdXbk5qU0d4WFRWWktSRlpxUVhoa1ZsWjFWMnhrYUdFelFrbFdiWEJIVkRKU1YxZHVUbFJpVjNoWVZXcE9iMkl4V25SalJVNXBUVlZXTkZkclZtdGhWazVHVjJ4U1dtSkhhRlJXTUZwVFZqRmtkVnBGTlZOaWEwcElWbXBLTkZReFdsaFRiRnBxVWxkU1lWUlZXbUZsYkZweFUydGthbUpWYnpKVlYzaDNZVWRGZUdORVdsZGlXRUpJVmtSR2ExWXlUa1phUjJoVFRXNW9WVmRYZEc5Uk1XUlhWMWhvWVZKR1NsZFVWbHB6VGtaVmVXUkhkR2hpUlhCWldWVm9UMVp0U2xWV2ExSmFaV3RhV0ZwRlZYaFdNVkp5VGxaT2FWSldhM2RXYlhCS1pVWkplRmRzYUZSaVJuQnhWV3hrYjFsV1VsWlhibVJPVFZad2VGVnRNVWRVTWtwR1kwWmFWbFl6YUROWlZXUkdaVWRPU0U5V1pHaGhNSEJ2Vm10U1MxUnRWbGRVYmtwb1VqSm9WRmxyVm5kV1ZscHhVV3hrVkUxWFVsaFdNV2h2VjBkS1dWVnVUbHBYU0VKSVZqQmFXbVZYVWtoa1JtUnBWbGhDTlZaSGVHRmpNV1IwVTJ0b2FGSnNTbGhVVlZwM1ZrWlpkMXBHVGxSU2EzQjZWbGQ0VDJGV1NuTmhNMmhYWVRGd2FGWnFTa1psUm1SellVWlNhRTFZUWxGV2JYaHJZakZaZUZWc2FFOVdhelZQVkZaYWQyVkdWWGxrUjBacFVteHdlbFV5ZUhkWGJGcFhZMGRvVjJGcldreFdNVnBIWTIxS1IyRkdaRk5YUlVWNVZqSjRWMWxYUlhoWFdHaGhVMFphVjFsc1pHOVdSbXh5Vm01a1YxWnNjREJhUldSSFYyeFpkMkpFVWxkTlYyaDJWMVphUzFKc1RuUlNiR1JwVjBVME1GWkdVa2RWTVZsNVVtdGFVRlp1UWxoWldIQlhVMFphY1ZOcVVsVk5WbXd6VkZaV2IxWnRTbk5qUm1oWFlrWndNMXBYZUhKbFYxWklVbXhrVjJFelFqWlhWbFpyWXpGVmVWTnJiRkppVlZwWVZGYzFVMWRHYkhGVGExcHNVbTFTTVZVeWN6RldNVnB6WTBaV1dGWnNTa3haYWtaclVqRldjMkZIY0ZOaVZrcGFWbGN4TkdNd01IaFhXR3hzVTBkU2NGVnFRbmRTTVZsNVRsaE9XbFpzY0ZoWk1HUnZWMjFGZVZWclpHRldNMmhJV1hwS1MxSXlSa2RoUmxKVFZsaENUMVp0ZUc5a01VbDRWRzVTVjJKSFVsVlpiWFIzWWpGV2NWTnRPVmRTYlhoYVdUQmFhMVl4V25OalJFSlZWbFpLU0ZaWGMzaFNWa3AxWTBaa1RsWXlhREpXTVZwaFV6RkplRlJ1VWxOaVIxSndWakJrYjA1c1draGxSMFpYWWxaYVYxUnNXbUZWUmxsNVlVWm9XbFpGTlVSVWJYaHJWbFpHZEdSSGJFNVdia0YzVmxkNGIySXlSbk5UYkd4b1VqQmFZVlpxVGxOaFJsbDNWMjVLYkZKdFVubGFSV1IzWVZaYWNtTkZhRmRTTTJob1ZrUktSMVl4VG5OaVJrcFhVbGhDV1ZaR1dtRmtNV1JIVjI1R1UySkZjSE5WYlRGVFpWWnNWbGRzVG1oU1ZFWmFWVmQ0UjFZeVNsbGhTRXBYVmtWYWFGbDZTa3RUVms1MFVteE9iR0pZYUZoV2JHTjRUa2ROZDAxSWFHRlRSWEJZV1ZkMFMxZEdWblJrU0dSc1lrWnNOVnBWWkVkV01rcEhZa1JhV2xaV1NsQldNbmhoVmpGYWNWVnNjR3hoTVhCUlYxUktlbVZHV1hsU2EyaG9VbFJXV0ZsdGRFcE5WbHAwWlVkd2EwMXNXa2hXTVdodlYwWmtTR1ZHV2xwV1JWb3pXV3BHVjJOV1VuTlViR1JUWWxob1lWZFVRbUZoTVZwelUyNU9hbEpGU2xaV2JHUnZaR3hhU0dNemFHcE5WMUl4V1RCYWExUnNXWGxoUkVwWFlXdHNORlpxU2s5ak1YQkpWbXhPYVZKc2NGbFhWM1JoWkRGa1YxZHJaRlpoTWxKWFZGZHplRTVXVm5Sa1IzUlhWakJ3U1ZaWGVHOVdWbHBYWTBkR1ZWWnNjSEpaZWtaaFpFWktjMXBGTlZkTlZXd3pWbXhTUzAxSFNYaFhibEpVWW1zMWNWVnFRbUZXYkZwMVkwWmthMkpJUWxsYVZXaHJWVEpLUjJOR2NGcFdWbkJ5Vm1wS1JtVkhTWHBhUm1ocFVteHdlVlpYY0V0VE1VNUhVMjVXVkdKRk5WaFZiRnBXVGxFOVBRPT0=Vm0wd2QyUXlVWGxXYTJoV1YwZG9WbFl3WkZOVU1WcHpXa1pPV0Zac2JETlhhMUpUVmpGS2MySkVUbGhoTWsweFZtcEdZV015U2tWVWJHaG9UVlZ3VlZadGNFdFRNVTVJVm10V1VtSlZXbGhXYlhoelRURmFjVkZ0UmxSTmJFcEpWbTEwVjFWdFNsWlhiR2hYWWxob2VsUlVSbUZqVmtaMFVteFNUbUY2UlRGV2EyUXdZekpHUjFOdVRtcFNWR3hoV1d4U1IyUnNXbGRYYlhSWFRWaENSbFpYZUhkV01ERkZVbFJDVjJFeVRYaFdSRXBIVmpGT1dWcEdhR2xTTW1oWlYxZDRVMVl4U2tkalJtUllZbGhTV0ZSV1pGTk5SbkJHVjJ4T1ZXSkdjRlpXYlhSM1ZqSktTRlZxVGxoV2JIQm9WVEJhVDJOdFJrZFhiV3hUWVROQ1dGWnRNVEJXTWxGNVZXNU9XR0pIVWxsWmJHaFRWMFpTVjFwR1RrNVNiRm93V2xWYVQyRkdXbk5qU0d4WFRWWktSRlpxUVhoa1ZsWjFWMnhhYUdFeGNGbFhhMVpoVkRKT2MyTkZaR2hTTW5odlZGVm9RMWRXV1hoWGJYUk9VbTE0V0ZVeGFHOWhiRXBYVjJ4U1dtSkdXbWhXTUZwaFpFZE9ObEp0ZUZOaVNFSmFWMnhXWVZReVJrZFhiazVxVTBkNFdGUldXa3RUUmxweFUydGFiRlpzV2xwWGExcDNZa2RGZUdOSE9WZGhhMHBvVmtSS1RtVkdjRWxVYldoVFRXNW9WVlpHWTNoaU1XUkhWMjVTVGxKRlduSlVWbHB6VGxaYVdFNVZPVmROYTNCNVZHeGFjMWR0U2toaFJsSmFUVlp3ZWxreWVHdGtSa3AwWlVaa2FXRXdjRWxXYlhCTFRrZEZlRmRzYUZSaVJuQnhWV3hrVTFsV1VsWlhiVVpyWWtad2VGVnRkREJWTWtwSVZXcENXbFpXY0ROWlZXUkdaVWRPUjFWc2FHbFNiSEJ2VjFaU1IyRXhaRWRWYmtwaFVteEtjRlpxVG05a2JGcEhWbTA1VWsxWFVucFdNV2h2V1ZaS1JsTnRSbGRoYTFwSVZGUkdVMVl5UmtaUFYyaHBVbGhDV1ZacVNqUlZNV1IwVTJ0b2FGSnNTbUZVVmxwM1pXeHJlV1ZJWkZOTlZrb3dXbFZhYTJGV1NsZGhNMlJYWWxoQ1RGUlZWWGhUUmtweVdrWm9hV0Y2Vm5oV1ZFSnJUa1pzVjFWc1dsaGlWVnB5V1d0YWMwMHhXWGxsU0dScFVqQndTRll5TlhkWGJGcFhZMFJPV2xaWFVrZGFWV1JQVTBVNVYyRkhhRTVXYmtKMlZtMTBVMU14VlhoWFdHaFhZbXhhVjFsc2FFTldSbXh5Vm01a1YxWnNjSGhWVjNoclZrVXhXRlZ1Y0ZkTlYyaDJWakJrUzFkV1ZuSlBWbHBwVmtWVmQxWnRjRWRWTVZwMFVtdG9VRll5YUZoWldIQlhVMFphY1ZOcVVsWk5WMUl3VlRKNGMxWldaRWhoUjBaVlZteHdNMVpyV21GalZrcDBaRWR3YVZacmNFcFhiRlpoWVRKR1YxTnVUbWhOTW1oWVdWUkdkMkZHV2xWU2ExcHNVbTFTTVZVeWN6RldNa3BYVTI1a1YxWXpVbWhhUkVaelZqRmtkVlJzYUdsV1ZuQlFWa1phWVdReVZrZFdibEpyVTBkU2NGVnFRbmRXTVZsNVpFaGtWMkY2UmpGWlZWcHZWMnhhVjFacVVscGxhMXBRV1RJeFMxSXhjRWhpUm1SVFZtMTBOVlpxU2pSV01XeFlVbGhvV0ZkSGFGZFpiWGhoVmpGc2MyRkZUbGRTYlhoNVZtMDFhMVl4V25OalJFSmhVbGRTU0ZZeWVGcGtNa3BGVld4a1RtRnNXbFZXYTJRMFV6RktjMXBJVmxSaVJscFlXV3RhZDA1c1draGtSMFpZWWxaYVdWWlhkRzloTVVsNVlVWm9XbGRJUWxoVk1GcHJWbFpHZEdSSGJFNVdia0YzVmxSS05HTXhXbGRhUldob1VtMW9ZVmxVUm5kTk1WbDNWMjVrVTJKSVFraFhhMXBUVmpKS2NsTnJiRmhXYkZweVdYcEdWbVZXVG5WVGJGSlhVbGhDV1ZkWGVHOWlNa1pIWWtoR1ZHRXhjSE5WYlhoM1pXeGtjbGR0ZEdoV2EzQjZXVEJhUTFZeFdYcFZia3BoVmpOTk1WWlhlRU5XVlRGRlRVUXdQUT09Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSV01WbDNXa1JTVjAxV2JETlhhMUpUVmpBeFYySkVUbGhoTVVwVVZqQmFTMlJIVmtkWGJGcE9ZbTFvVVZadGNFZFpWMDE1VTJ0V1ZXSkhhRzlVVm1oRFZWWmFkRTFVVWxSTmF6RTFWVEowVjFaWFNraFZhemxhWWxob1NGUlVSbUZrUjA1R1drWndWMDFWY0VwV2JURXdWakZXZEZOc1dsaGlSMmhZV1d4b2IyVnNVbFZTYlVacVZtdGFNRlZ0ZUZOVWJVWTJVbFJHVjFaRmIzZFdha1poVjBaT2NtRkdXbWxoTUhCWVYxZDRiMVV3TUhoV1dHaFlZbFZhY2xWcVJrdFRSbGw1VFZSU1ZrMXJjRWxhU0hCRFZqSkdjbUV6YUZaaGExcG9WakJhVDJOdFJrZFhiV3hvVFVoQ1dsWnJXbGRaVjFGNFZHdGtWbUpHV2xSWmJGWmhZMVpzY2xkdFJteFdiVko1VmpJMWExWXdNVVZTYkdSYVRVWmFNMVpxU2t0V1ZrcFpXa1p3YkdFelFrbFdWM0JIVkRKU1YxWnVUbGhpVjNoVVdWUk9RMWRHV25STlZFSlhUVlZzTTFSVmFHOWhiRXB6WTBac1dtSkhhRlJXTUZwVFZqSkdSbFJzVG1sU2JrSmFWMnhXWVZReVJrZFhiazVxVTBkNFdGUldXa3RUUmxweFUydGFiRlpzV2xwWGExcDNWakZLVjJOSGFGaGlSbkJvVmtSS1RtVkdjRWxVYldoVFRXNW9WVmRXVWs5Uk1XUlhWMWhvWVZKRlNtOVVWM1J6VGtaVmVXUkhkR2hpUlhBd1ZsZDRjMWR0U2toaFJsSlhUVVp3VkZacVJtdGtSa3AwWlVaa2FWWnJiekZXYWtvd1lXczFWMWRzYUZSaE1sSnhWVzE0ZDFkR2JITmhSazVyWWtad2VGVnRkREJWTWtwSVZXcENXbFpXY0ROWlZXUkdaVWRPUjFWc2FHbFNiSEJ2VjFaU1MxVXhXWGhhU0ZaVllrWktjRlpxU205bGJHUllaVWM1YVUxWFVsaFdNV2h2VjBkS1dWVnJPVlpoYTFwSVZHeGFZVmRGTlZaUFZtaFRUVVpaTVZac1pEUmpNV1IwVTJ0b2FGSnNTbGhVVmxwM1YwWnJlRmRyZEdwaVZrcElWbGQ0YTJGWFJYZGpSV3hYWWxoQ1RGUnJaRVpsVmtweVdrWm9hV0Y2Vm5oV1ZFSnZVVEZzVjFWc1dsaGhNMUp2VlcxNGQyVkdWWGxrUkVKWFRWWndlVll5ZUhkWGJGcFhZMGhLVjJGcldreFdNVnBIWTIxS1IxcEdaRTVOUlhCS1ZtMTBVMUl5UlhoYVJXUlZZbXR3YjFWcVRtOVdSbXh5Vm01a1YxWnNjREJhVldNMVZXc3hjbUpFVWxkTlYyaDJWakJrUzFKck5WZFZiRlpYWWxaRmQxWnRjRWRWTVZwMFVtdG9VRll5YUhCVmJHaENaREZrVjFadE9WVk5WbkF3VlRKNGMyRkdTa1pPVjBaaFZqTlNhRll3V25kU2JIQkhXa1pTVjJKclNraFdSM2hoVkRKR1YxTnNaR2hOTWxKWVdXeG9RMVJHVWxaV1dHaFRUVmRTZWxsVldsTmhWa3AxVVd4d1YySllVbGhhUkVaYVpVZEtTVk5zYUdoTk1VcFdWbGN4TkdReVZrZFdXR3hyVWtWS1dGUldXbmRsVm10M1YyMUdWMkpHYkRaWlZWSlBWMjFGZVZWclpHRldWMUpRVlRCVk5WWXlSa2hoUlRWWFltdEtNbFp0ZUc5a01VMTRWbGhvV0ZkSGFGZFpiWGhoVmpGc2MyRkZUbGRTYlhoYVdUQmFhMVpzU25OalJteFZWbFpLU0ZaWGMzaFhSbFoxWTBaa1RtRnNXazFXYWtKclV6Rk9SMVp1VWxOaVIxSnZXVlJHZDFOV1draGtSMFphVm1zMVNWWlhkRzloTVVsNVlVWm9XbGRJUWxoVk1WcGhWbFpPVlZKc1ZrNVdia0kxVmtaYVYyRXhXWGhhUldob1VtMW9XRmxyV25kTk1YQllaVWhLYkZZeFdrbGFSV1IzWVZaYWNtTkZhRmRTTTJob1ZrUktSMVl4VG5WVmJFSlhVbFJXV1ZaR1dtRlRNVlpIWTBWV1UySklRbk5WYlRGVFYyeGtjbFpVUmxkTlZuQjZXVEJhVjFkR1duTlRiRUpXVmtWYVlWcFZXbXRrVmtwelZtMXNWMUl6YURKV2JHTjRUa2RSZVZaclpGZGliRXBQVm14a1UySXhVbGRXYm1Sc1lrWldOVlJzWXpWV01ERlhZbnBLVm1KWVVuWldha1poVW14a2NtVkdaR2hoTTBKUlZsUkdhMU14U1hsU2EyUm9VbXhLVkZac2FFTlRNVnB4VTJwQ1ZrMVZiRFJXUm1oelZsWmtTR0ZJUmxaaVIxRXdWbXhhYzJOc1duSmtSbWhUWWxob05sWXlkR3BPVmxsNFYyNU9hbEpGU21oVmJHUlRVMFpaZVdWR2NHdE5hM0JHVmxkNGExUnNXWGxoUkVwWFRWWndhRlY2Umt0ak1WSjFWRzFvVTJKclNscFdWRUpYVXpGT1YxZHVSbEppVlZwWVdXeGFZVmRXV2xoa1J6bG9UVlZzTlZsVldtOVhiRnBHVGxWU1ZXSllhSEpXYkZwSFpFWktkR0pGTlZkTlZXd3pWbXhTUzA1SFRYaFhiR1JoVWxkb2IxVnRNVzlaVm14VlVtNWtUazFYZUZkV01qVnJWVEpLU1ZGclpGVk5WbFV4V1ZaYVMxZFdSbkZXYkdSVFRUSm9iMVpyVWt0U01WbDRZMFZhYUZJeWFGUlpiR2h2VjFaa1YxcEVRbXRpVmtZMFZqSTFSMVpIUlhoalNFNVdZbFJHVkZZeWVITldiR1J6Vkcxb1YwMUdXVEpXVm1NeFlqRlplRmRxV2xOV1JVcG9WV3RXWVdOc1ZuRlRhM1JVVm14S01GbFZXazlXTVZwSFYyeHNWMkpIVGpSVWEyUlNaREF4VmxwSGJGTlNia0pYVjFkNFUyTXhaRWRWYkZwV1lUSlNXVlp0ZUhkWFZtdDNWbTEwVjAxRVJrWlZiWEJIVjJ4YVdHRkZlRmRoYTFwb1ZXMTRhMk50VmtkYVJUVlhZbXRLU2xZeGFIZFNNVTE1VkZob2FsSlhVbWhWYWs1dllqRlNWbHBFUWs1TlZuQXdXbFZqTldFd01WWmlSRkpYVW0xb2VsWnRNVVpsVmxaelYyeHdhVmRHU1hwWFZsWmhWakpTUmsxV2FGQldNMEpVV1d0b1EwNUdXbkpaTTJSUFZqQldNMVJXV210aGJFcHpZMFprVjJGck5YWlpNbmhoWTJ4YVdXRkdaRTVXVkZZMlYxWldZV0V4VW5SU2JrNVlZa1ZhV0ZsWGRITk9SbHB4VTJzNWFrMVlRa3BXYlhoVFlWWktjMk5HYkZoV00xSjJWVlJCTVdNeFpISmhSM2hUVFVad1dWZFhlR0ZaVms1WFZtNVNhMUo2YkZkVmJYaHpUbFpzVmxkc1RsZE5hMVkwVmpKME1GWldXbk5qUjJoYVpXdGFlVnBYZUhkU2F6bFhXa2RzVkZKVldYcFdiWGhUVXpBeFNGTlliRk5oTWxKVldXMXpNVlpXYkhOV2JVWlhZa1p3TVZrd1dtdGhNa3BKVVd4c1lWWlhhRXhaYTFwYVpVWmtjbU5HWkZOTk1EQjRWMVphWVZNeVVsZFNia1pYWWtkU1ZGVnNXbmRsVm1SWlkwVmtWMkpXV2xoV1J6VkxXVlpKZVdGRk9WVldla1oyVmpGYWExWXhWbkphUjNST1lURndTVmRYZEdGaU1rWjBWbTVLV0dKSGVGZFpiR2hUVFRGd1YxZHRkR3BpUjFJd1ZERmtiMVl3TVVsUmEyaFlWa1ZLYUZscVJtdFNNV1IxVkd4U2FFMHlhR2hYVm1Rd1dWZE9jMVp1UmxOaVIxSnhWRmQwWVZOV2EzZFhhemxvVm14d2VWa3dVbGRXTURGWVZWaGtXbFpGV2xkYVZWcDNVbXh3UjJGR2FGTk5NbWcxVm14a01GWXhUWGhhUm1SWFlteEtjbFV3WkZOak1XeHlWMjVPVDFac1NucFpWV1F3VjBaS2NtSkVUbGRpV0VKVVZqSnplRkl4VG5OUmJHUm9ZVE5DU1ZkVVNqUmhNbEpJVW10a1lWSXlhRzlVVm1oRFpHeGFkRTFVVWxwV2F6RTFWa1pvYjJGc1NsaFZiV2hXWWxSR1ZGa3dXbk5XVmtaMVdrWlNhVkp1UVhkWGExWmhWREZWZDAxV2FHeFNiV2hYV1d0a2IyUnNXbkZUYTNScVlYcFdXRlpIZUhkaFJURlpVVzA1VjJFeFNraFdha3BQWXpGYWRWTnNVbWxTVlhCWVZtMTBVMUZyTlZKUVZEQTk=